// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PaymentAndDiscountCardSystemDAL;

#nullable disable

namespace PaymentAndDiscountCardSystemDAL.Migrations
{
    [DbContext(typeof(StoreDbContext))]
    [Migration("20240331105802_AddOrderAndOrderItems")]
    partial class AddOrderAndOrderItems
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PaymentAndDiscountCardSystem.Domain.Entity.Cards.DiscountCard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<int>("DiscountRate")
                        .HasColumnType("integer");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("DiscountCard");

                    b.HasDiscriminator<string>("Discriminator").HasValue("DiscountCard");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("PaymentAndDiscountCardSystemDomain.Entity.Customers.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("AccumulatedAmount")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("PaymentAndDiscountCardSystemDomain.Entity.Orders.Order", b =>
                {
                    b.Property<Guid>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uuid");

                    b.HasKey("OrderID");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("PaymentAndDiscountCardSystemDomain.Entity.OrdersItems.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Cost")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrdersItems");
                });

            modelBuilder.Entity("PaymentAndDiscountCardSystemDomain.Entity.Cards.DiscountCards.AmountDiscountCards.AmountDiscountCard", b =>
                {
                    b.HasBaseType("PaymentAndDiscountCardSystem.Domain.Entity.Cards.DiscountCard");

                    b.Property<decimal>("ThresholdAmount")
                        .HasColumnType("numeric(20,0)");

                    b.HasDiscriminator().HasValue("AmountDiscountCard");
                });

            modelBuilder.Entity("PaymentAndDiscountCardSystemDomain.Entity.Cards.DiscountCards.TimeLimitedDiscountCard.Implementation.FunnyCard", b =>
                {
                    b.HasBaseType("PaymentAndDiscountCardSystem.Domain.Entity.Cards.DiscountCard");

                    b.Property<DateTime[]>("DiscountsDaysPerMonth")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone[]");

                    b.HasDiscriminator().HasValue("FunnyCard");
                });

            modelBuilder.Entity("PaymentAndDiscountCardSystemDomain.Entity.Cards.DiscountCards.TimeLimitedDiscountCard.Implementation.QuantumCard", b =>
                {
                    b.HasBaseType("PaymentAndDiscountCardSystem.Domain.Entity.Cards.DiscountCard");

                    b.HasDiscriminator().HasValue("QuantumCard");
                });

            modelBuilder.Entity("PaymentAndDiscountCardSystem.Domain.Entity.Cards.DiscountCard", b =>
                {
                    b.HasOne("PaymentAndDiscountCardSystemDomain.Entity.Customers.Customer", "Customer")
                        .WithMany("DiscountCards")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("PaymentAndDiscountCardSystemDomain.Entity.Orders.Order", b =>
                {
                    b.HasOne("PaymentAndDiscountCardSystemDomain.Entity.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("PaymentAndDiscountCardSystemDomain.Entity.OrdersItems.OrderItem", b =>
                {
                    b.HasOne("PaymentAndDiscountCardSystemDomain.Entity.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("PaymentAndDiscountCardSystemDomain.Entity.Orders.Order", "Order")
                        .WithMany("orderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("PaymentAndDiscountCardSystemDomain.Entity.Customers.Customer", b =>
                {
                    b.Navigation("DiscountCards");
                });

            modelBuilder.Entity("PaymentAndDiscountCardSystemDomain.Entity.Orders.Order", b =>
                {
                    b.Navigation("orderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
